const int ArrLen = 20;
void merge(int arr[], int start, int mid, int end) {
    int result[ArrLen];
    int k = 0;
    int i = start;
    int j = mid + 1;
    while (i <= mid && j <= end) {
        if (arr[i] < arr[j]) {
            result[k] = arr[i];
            k = k + 1;
            i = i + 1;
        } else {
            result[k] = arr[j];
            k = k + 1;
            j = j + 1;
        }
    }
    if (i == mid + 1) {
        while (j <= end) {
            result[k] = arr[j];
            k = k + 1;
            j = j + 1;
        }
    }
    if (j == end + 1) {
        while (i <= mid) {
            result[k] = arr[i];
            k = k + 1;
            i = i + 1;
        }
    }
    j = 0;
    i = start;
    while (j < k) {
        arr[i] = result[j];
        i = i + 1;
        j = j + 1;
    }
}

void mergeSort(int arr[], int start, int end) {
    if (start >= end)
        return;
    int mid = (start + end) / 2;
    mergeSort(arr, start, mid);
    mergeSort(arr, mid + 1, end);
    merge(arr, start, mid, end);
}

int main() {
    int arr[10];
    int i = 0;
    while (i < 10) {
        arr[i] = getint();
        i = i + 1;
    }
    mergeSort(arr, 0, 9);
    i = 0;
    while (i < 10) {
        printf("arr[%d] = %d ", i, arr[i]);
        i = i + 1;
    }
    return 0;
}
