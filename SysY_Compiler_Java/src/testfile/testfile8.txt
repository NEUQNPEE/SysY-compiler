// test "Array1D, Array2D"
const int value = 1, size = 10;
const int constArray1D[3] = {value, value + 1, value + 2};
const int constArray2D[2][2] = {{1, 0}, {0, 1}};

int i, j;
int factorial[10], number[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
int matrixMulResult[2][2], matrixMulFactor[2][2] = {{1, 2}, {3, 4}};

int main()
{
        int tmp = 0;
        i = 0;
        int size2 = 3;
        while (i < size2)
        {
                tmp = tmp + constArray1D[i];
                i = i + 1;
        }
        printf("sum of constArray1D: %d\n", tmp);

        factorial[0] = 1;
        i = 1;
        while (i < size)
        {
                factorial[i] = factorial[i-1] * number[i];
                i = i + 1;
        }
        printf("num of factorial9: %d\n", factorial[9]);

        matrixMulResult[0][0] = matrixMulFactor[0][0] * constArray2D[0][0] + matrixMulFactor[0][1] * constArray2D[1][0];
        matrixMulResult[0][1] = matrixMulFactor[0][0] * constArray2D[0][1] + matrixMulFactor[0][1] * constArray2D[1][1];
        matrixMulResult[1][0] = matrixMulFactor[1][0] * constArray2D[0][0] + matrixMulFactor[1][1] * constArray2D[1][0];
        matrixMulResult[1][1] = matrixMulFactor[1][0] * constArray2D[0][1] + matrixMulFactor[1][1] * constArray2D[1][1];
        printf("%d %d\n", matrixMulResult[0][0], matrixMulResult[0][1]);
        printf("%d %d\n", matrixMulResult[1][0], matrixMulResult[1][1]);


        return 0;
}